png(file = paste0(here(), '/results/plots/phenology_estimates_10_90.png'),
width = 6, height = 6, pointsize = 4, units = 'cm', res = 300)
par(pty="s",mgp=c(2,1,0),  mfrow = c(2,2), mar = c(3,3,1,1))
plotCI(x = rd_start$DOY_obs,  rd_start$DOY_est,
li = rd_start$DOY_low, ui = rd_start$DOY_high,
pch=20, slty = 3, gap = 0.025, scol = 'grey70', sfrac = 0.0, col = 'grey15',
xlim = c(140,220), ylim = c(140,220), axes = F,
main = "First Flower Date",
xlab = "", ylab = "Estimated (DOY)")
axis(1)
axis(2)
text(155, 215, paste0("tau = ", round(start_kt[["estimate"]][["tau"]], 3)))
text(155, 209, "p < 0.001")
abline(start_lm, lty = 2)
plotCI(x = rd_peak$DOY_obs,  rd_peak$DOY_est,
li = rd_peak$DOY_low, ui = rd_peak$DOY_high,
pch = 20, slty = 3, gap = 0.025, scol = 'grey70', sfrac = 0.0, col = 'grey15',
xlim = c(160,240), ylim = c(160,240), axes = F,
main = "Peak Flower Date",
xlab = "", ylab = "Estimated (DOY)")
axis(1)
axis(2)
#text(175, 235, paste0('RMSE = ', round(peak_lm_rmse, 3)))
text(175, 235, paste0("tau = ", round(peak_kt[["estimate"]][["tau"]], 3)))
text(175, 229, "p < 0.001")
abline(peak_lm)
plotCI(x = rd_last$DOY_obs,  rd_last$DOY_est,
li = rd_last$DOY_low, ui = rd_last$DOY_high,
pch = 20, slty = 3, gap = 0.025, scol = 'grey70', sfrac = 0.0, col = 'grey15',
xlim = c(160,250), ylim = c(160,250), axes = F,
main = "Last Flower Date",
xlab = "Observed (DOY)", ylab = "Estimated (DOY)")
axis(1)
axis(2)
#text(175, 245, paste0('RMSE = ', round(last_lm_rmse, 3)))
text(235, 173, paste0("tau = ", round(end_kt[["estimate"]][["tau"]], 3)))
text(235, 165, "p < 0.001")
abline(last_lm)
plotCI(x = rd_dur$DOY_obs,  rd_dur$DOY_est,
li = rd_dur$DOY_low, ui = rd_dur$DOY_high,
pch = 20, slty = 3, gap = 0.025, scol = 'grey70', sfrac = 0.0, col = 'grey15',
xlim = c(10,90), ylim = c(10,90), axes = F,
main = "Duration",
xlab = "Observed (Days)", ylab = "Estimated (Days)")
axis(1)
axis(2)
#text(25, 75, paste0('RMSE = ', round(dur_lm_rmse, 3)))
text(75, 21, paste0("tau = ", round(dur_kt[["estimate"]][["tau"]], 3)))
text(75, 15, paste0("p = ", round(dur_kt[["p.value"]], 3)))
abline(duration_lm)
dev.off()
rm(rd_start, rd_peak, rd_last, rd_dur, groundTruth, weibull_estimates_test,
duration_lm, end_lm, last_lm, peak_lm, start_lm,
dur_lm_rmse, last_lm_rmse, peak_lm_rmse, start_lm_rmse,
dur_kt, end_kt, last_kt, peak_kt, start_kt)
library(tidyverse)
library(raster)
library(here)
files <- list.files(paste0(here(), '/results/maps'), pattern = "tif$")
linear = files[str_detect(files, 'glm')]
machine = files[str_detect(files, 'ml')]
ls <- list('linear' = linear,  'machine' = machine)
# so we can rerun this simply  as we tack on more species we will
# create two equal length vectors for binding into a dataframe
ls1 <- lengths(ls)
length( # here we pad the shorted list with NA's
ls[[
names(ls[which.min(ls1)])
]]
) <- max(ls1)
ls <- lapply(ls, data.frame)
ls <- bind_cols(ls)
colnames(ls) <- c('linear', 'machine')
ls <- ls %>%
mutate(across(.cols = everything(), # create just a copy of the binomials
.fns = list(binomial = ~ gsub("_ml_2022.*|_glm_2022.*|", "", .)),
.names = "{fn}_{col}")
) %>%
mutate(across(!contains('binomial'),
~ paste0(here(), '/results/maps/', .x)
))
# now ensure that the data are in the same order as each other...
ls_mach <- ls %>% dplyr::select(contains('machine')) %>% drop_na()
ls_line <- ls %>% dplyr::select(contains('linear'))
# full here but may not end up being best option - inner may end up being best
rasters <- full_join(ls_line, ls_mach,
by = c("binomial_linear" =  "binomial_machine")
) %>%
drop_na()
rl <- rasters %>% dplyr::select(linear, binomial_linear) %>%
distinct(linear, .keep_all = T)
rm <- rasters %>% dplyr::select(machine, binomial_linear) %>%
distinct(machine, .keep_all = T)
# HERE WILL DEAL WITH DROPPING NA' ACROSS ALL GROUPS
linear_stack <- terra::rast(rl$linear)
machine_stack <- terra::rast(rm$machine)
rm(ls, ls_mach, ls_line, linear, machine, files, ls1, rasters, rl, rm)
mach_mean <- terra::app(machine_stack, fun = 'mean', cores = 12)
mach_mean <- terra::app(machine_stack, fun = 'mean')
library(tidyverse) # data tidying
library(sf) # spatial data compliant with tidyverse
library(raster) # raster data
library(here)
library(spdep)
set.seed(12)
predictions_stack <- paste0(here(), '/results/maps/',
list.files(paste0(here(), '/results/maps/'),
pattern = "*.tif$" ))
predictions_stack <- raster::stack(predictions_stack)
sites <- paste0(here(), '/data/processed/',
list.files(paste0(here(), '/data/processed/'),
pattern = 'Bombus_site_occurences.shp'))
sites <- st_read(sites, quiet = T) %>% dplyr::select(site)
sites_cent <- st_centroid(sites)
dist_nb <- knn2nb(knearneigh(sites_cent, k=3))
listw <- nb2listw(dist_nb, style="B")
mst.bh <- mstree(listw,2)
#plot(st_geometry(sites), border=gray(.5))
#plot(mst.bh, coordinates(as(sites, "Spatial")), col=2,
#     cex.lab=.6, cex.circles=0.035, fg="blue", add=TRUE)
mst.bh <- mst.bh[,1:2]
colnames(mst.bh) <- c('From','To')
coords <- sites_cent %>%
dplyr::mutate(lon = sf::st_coordinates(.)[,1],
lat = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
mst.bh <- as.data.frame(mst.bh)
lines <- data.frame(matrix(ncol=1, nrow=5))
for (i in 1:nrow(mst.bh)){
lines[i,] <-  st_linestring(matrix(c(coords[mst.bh[i,1],2], coords[mst.bh[i,2],2],
coords[mst.bh[i,1],3], coords[mst.bh[i,2],3]),
2, 2)) %>%
st_sfc() %>%
st_as_sf(crs = 32613)
}
lines <- lines %>% st_as_sf(crs = 32613)
st_crs(lines) <- 32613
st_geometry(lines) <- 'geometry'
rm(dist_nb, coords, listw, mst.bh, i, sites_cent)
study_area <- st_buffer(lines, dist = 400, endCapStyle = 'ROUND',
joinStyle = 'ROUND') %>%
st_union() %>%
st_as_sf()
site_bbox <- study_area %>%
st_buffer(250) %>%
st_transform(4326) %>%
st_bbox(sites)
names(site_bbox) <- c('left', 'bottom', 'right', 'top')
basemap <- ggmap::get_stamenmap(site_bbox, zoom = 14, maptype = "terrain", messaging = F)
ggmap::ggmap(basemap) +
geom_sf(data = study_area,
alpha = 0.5,
fill = "chocolate2",
color = "chocolate2",
show.legend = "line",
size = 1.2,
inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326))
rm(lines)
study_area <- st_transform(study_area, st_crs(predictions_stack[[1]]))
extracted_values <- terra::extract(predictions_stack, study_area)
extracted_values <- data.frame(extracted_values)
names(extracted_values) <- gsub("_glm.*", "", names(extracted_values))
names(extracted_values) <- make.unique(names(extracted_values), "_")
sample_size <- nrow(extracted_values)
extracted_values <- extracted_values %>% summarise(across(1:ncol(.), summary))
rownames(extracted_values) <- names(summary(c(1)))
extracted_values <- extracted_values %>%
rownames_to_column('Stat') %>%
pivot_longer(!Stat) %>%
mutate(value = as.numeric(value))
extracted_values  %>%
mutate(value = if_else(value < 0, 0, value)) %>%
mutate(value = if_else(value > 1, 1, value)) %>%
ggplot() +
geom_density(aes(value, fill = Stat), position="stack") +
labs(title="Summary of Suitable Habitat from SDM's in East River Valley",
x ="Probability of Suitable Habitat", y = "Density") +
theme_bw() +
xlim(0,1)
removals <- extracted_values %>%
filter( Stat == 'Mean' & value <= 0.5) %>%
filter(str_detect(name, '_1',negate= T))
targets <- extracted_values %>%
filter(Stat == 'Mean' & value >= 0.5) %>%
filter(str_detect(name, '_1',negate= T))
View(targets)
View(removals)
View(targets)
targets %>%
mutate(approach = if_else(str_detect('_ml_2022'), 'ML', 'LM'))
targets %>%
mutate(approach = if_else(str_detect('_ml_2022', .), 'ML', 'LM'))
?str_detect
targets %>%
mutate(approach = if_else(str_detect(., '_ml_2022'), 'ML', 'LM'))
targets %>%
mutate(approach = if_else(str_detect(approach, '_ml_2022'), 'ML', 'LM'))
targets %>%
mutate(approach = if_else(str_detect(name, '_ml_2022'), 'ML', 'LM'))
targets %>%
mutate(approach = if_else(str_detect(name, '_ml_2022'), 'ML', 'LM')) %>%
mutate(name = str_remove(name, '_ml_2022.*$'))
targets %>%
group_by(name) %>%
filter(n() == 5)
targets %>%
group_by(name) %>%
filter(n() == 2)
targets %>%
group_by(name) %>%
filter(n() == 1)
targets <- targets %>%
mutate(approach = if_else(str_detect(name, '_ml_2022'), 'ML', 'LM')) %>%
mutate(name = str_remove(name, '_ml_2022.*$'))
targets %>%
group_by(name) %>%
filter(n() == 1)
targets %>%
group_by(name) %>%
filter(n() == 2)
targets %>%
group_by(name) %>%
filter(n() == 2) %>%
distinct()
targets %>%
group_by(name) %>%
filter(n() == 2) %>%
distinct(name)
View(removals)
consensus <- targets %>%
group_by(name) %>%
filter(n() == 2) %>%
distinct(name)
target <- targets %>%
group_by(name) %>%
filter(n() == 1)
View(target)
consensus <- targets %>%
group_by(name) %>%
filter(n() == 2) %>%
distinct(name) %>%
mutate(Algo = 'consensus')
target <- targets %>%
group_by(name) %>%
filter(n() == 1) %>%
mutate(Algo = approach)
View(target)
target <- targets %>%
group_by(name) %>%
filter(n() == 1) %>%
mutate(Algo = approach) %>%
bind_rows(., consensus) %>%
dplyr::select(-approach)
View(target)
target <- targets %>%
group_by(name) %>%
filter(n() == 1) %>%
mutate(Algo = approach) %>%
bind_rows(., consensus) %>%
dplyr::select(-approach) %>%
arrange(name)
View(target)
View(consensus)
target <- targets %>%
group_by(name) %>%
filter(n() == 1) %>%
mutate(Algo = approach) %>%
bind_rows(., consensus) %>%
dplyr::select(-approach, -stat, -value) %>%
arrange(name)
View(targets)
View(targets)
target <- targets %>%
group_by(name) %>%
filter(n() == 1) %>%
mutate(Algo = approach) %>%
bind_rows(., consensus) %>%
dplyr::select(-approach, -Stat, -value) %>%
arrange(name)
View(target)
View(target)
getwd()
here()
paste0(here(), '/data/processed')
write.csv(target, paste0(here(), '/data/processed/taxa_predicted_rmbl.csv'), row.names = F)
dat <- structure(list(name = c("AP1402_C110617", "AP1402_C111121", "AP1402_C111617",
"AP1402_C112200", "AP1402_C112219", "AP1402_C112515"), Latitude = c(-78.4326169598409,
-78.4243276812641, -78.4105301310195, -78.4211498660601, -78.4126208020092,
-78.4214041610924), Longitude = c(45.4514150332163, 45.4737126348589,
45.4560042609868, 45.5304703938887, 45.5007103937952, 45.4347135938299
)), .Names = c("name", "Latitude", "Longitude"), row.names = c(NA,
6L), class = "data.frame")
library(rgdal)
library(sp)
dat <- SpatialPointsDataFrame(data=dat,  coords=dat[,2:3], proj4string=CRS("+proj=longlat +datum=WGS84"))
writeOGR(dat,
dsn="TEST3234.gpx", layer="waypoints", driver="GPX",
dataset_options="GPX_USE_EXTENSIONS=yes")
dat <- structure(list(name = c("AP1402_C110617", "AP1402_C111121", "AP1402_C111617",
"AP1402_C112200", "AP1402_C112219", "AP1402_C112515"),
Latitude = c(-78.4326169598409, -78.4243276812641, -78.4105301310195,
-78.4211498660601, -78.4126208020092, -78.4214041610924),
Longitude = c(45.4514150332163, 45.4737126348589, 45.4560042609868,
45.5304703938887, 45.5007103937952, 45.4347135938299
)),
.Names = c("name", "Latitude", "Longitude"),
row.names = c(NA, 6L), class = "data.frame")
View(dat)
dat <- SpatialPointsDataFrame(data=dat,  coords=dat[,2:3], proj4string=CRS("+proj=longlat +datum=WGS84"))
View(dat)
writeOGR(dat,
dsn="TEST3234.gpx", layer="waypoints", driver="GPX",
dataset_options="GPX_USE_EXTENSIONS=yes")
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
library(tidyverse)
library(sf)
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
library(tidyverse)
library(sf)
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
library(tidyverse)
library(sf)
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
library(here)
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
library(here)
here()
library(here)
here()
getwd()
setwd('/home/reed/AIM_Field/scripts')
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
here()
set_here('/home/reed/AIM_Field')
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
here()
set_here('/home/reed/AIM_Field')
set_here('/home/reed/AIM_Field')
here()
setwd('/home/reed/AIM_Field/scripts')
set_here('/home/reed/AIM_Field')
here()
initial_process <- readxl::read_excel(paste0(here(),  '/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- readxl::read_excel(paste0(here(),  'AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id', 'panel', 'long', 'lat', 'next_in_line_or_oversample'))) %>%
rename('Point_Type' = next_in_line_or_oversample)
View(initial_process)
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) #%>%
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
as('Spatial')
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
as('Spatial')
View(initial_process)
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
st_transform(4326) %>%
as('Spatial')
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
st_transform(4326) %>%
as('Spatial')
here()
writeOGR(initial_process,
dsn= paste0(here(),  '/AIM_Field/data/processed/AIM_2022.gpx'), layer="waypoints", driver="GPX",
dataset_options="GPX_USE_EXTENSIONS=yes")
View(initial_process)
dat <- structure(list(name = c("AP1402_C110617", "AP1402_C111121", "AP1402_C111617",
"AP1402_C112200", "AP1402_C112219", "AP1402_C112515"),
Latitude = c(-78.4326169598409, -78.4243276812641, -78.4105301310195,
-78.4211498660601, -78.4126208020092, -78.4214041610924),
Longitude = c(45.4514150332163, 45.4737126348589, 45.4560042609868,
45.5304703938887, 45.5007103937952, 45.4347135938299
)),
.Names = c("name", "Latitude", "Longitude"),
row.names = c(NA, 6L), class = "data.frame")
library(rgdal)
library(sp)
dat <- SpatialPointsDataFrame(data=dat,  coords=dat[,2:3], proj4string=CRS("+proj=longlat +datum=WGS84"))
View(dat)
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
st_transform(4326) %>%
as('Spatial')
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
st_transform(4326) %>%
as('Spatial')
View(initial_process)
dat@data[["name"]]
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
rename(name = 'plot_id') %>%
st_transform(4326) %>%
as('Spatial')
writeOGR(initial_process,
dsn= paste0(here(),  '/AIM_Field/data/processed/AIM_2022.gpx'), layer="waypoints", driver="GPX",
dataset_options="GPX_USE_EXTENSIONS=yes")
library(tidyverse)
library(sf)
library(here)
initial_process <- readxl::read_excel(paste0(here(),  '/AIM_Field/data/raw/PlotTracking_AIM_plots_2022-COPY.xlsx'),
sheet = 3) %>%
janitor::clean_names()
initial_process <- initial_process %>%
drop_na(long:lat) %>%
filter(long != 'SAMPLED IN 2018') %>%
st_as_sf(coords = c(x = 'long', y = 'lat'), crs = 4269, remove = F) %>%
select(any_of(c('plot_id'))) %>%
rename(name = 'plot_id') %>%
st_transform(4326) %>%
as('Spatial')
writeOGR(initial_process,
dsn= paste0(here(),  '/AIM_Field/data/processed/AIM_2022.gpx'), layer="waypoints", driver="GPX",
dataset_options="GPX_USE_EXTENSIONS=yes")
